
extension Dictionary

  val count := length(self)

  func toString() => self

  func add(.key, .value) => dictAdd(self, key, value)
  func add(.list) => dictAddList(self, list)

  func delete(.key)
    dictDelete(self, key)
  end

  func contains(.key) => dictContainsKey(self, key)
  func contains(.value) => dictContainsValue(self, value)

  func value(of key) => dictValueOf(self, key)
  func key(of value) => dictKeyOf(self, value)

  func set(.sorted)
    dictSetSorted(self, sorted)
  end
  func sort()
    dictSort(self)
  end

  func clear()
    dictClear(self)
  end
end

extension Dictionary
  val keys := dictKeys(self)
  val values := dictValues(self)
end

class DictionaryIterator
  let keys := Null, values := Null
  var index := 0

  init(list)
    self.keys := list.keys
    self.values := list.values
  end

  func makeItem(key, value)
    class Item
      let key := Null, value := Null
      init(key, value)
        self.key := key
        self.value := value
      end
    end
    return Item(key, value)
  end

  val hasNext := self.index <  length(self.keys)

  val next
    let nextItem := self.makeItem(
      self.keys[self.index], self.values[self.index])
    self.index +=1
    return nextItem
  end
end

extension Dictionary
  val iterator := DictionaryIterator(self)
end

